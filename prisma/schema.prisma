// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

// DEFINE Schemas for Data Models

/// Enums
enum Payments {
  CASH
  ONLINE
}

enum OrderStatus {
  PENDING
  DELIVERED
  PROCESSING
  ON_ROAD
  CANCELED
}

enum SellingZone {
  ANYWHERE
  STATE_ONLY
  CITY_ONLY
}

enum ShopStatus {
  OPEN
  CLOSED
  ON_VACATION
  LIMITED
}

/// CATEGORIES
model Category {
  id        String    @id @default(cuid())
  name      String
  code      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime?
}

/// Vendor # Multi-vendor eCommerce system
model Vendor {
  id           String      @id @default(cuid())
  name         String
  email        String      @unique
  password     String
  vcode        String      @unique
  products     Product[]
  total_sells  Int         @default(0)
  total_income Float       @default(0)
  shop_address String?
  city         String?
  postalCode   Int?
  state        String?
  selling_zone SellingZone @default(ANYWHERE)
  shopStatus   ShopStatus  @default(OPEN)
  dayStart     DateTime?
  dayClose     DateTime?
  joinedAt     DateTime    @default(now())
  last_update  DateTime?
}

/// USER
model User {
  id        String       @id @default(cuid())
  email     String       @unique
  password  String
  name      String?
  cartItems Cart[]
  account   AccountInfo?
  orders    Order[]
  joinedAt  DateTime     @default(now())
  updatedAt DateTime?
}

model AccountInfo {
  id           String             @id @default(cuid())
  userId       String             @unique
  user         User               @relation(fields: [userId], references: [id])
  avatarImg    String             @default("user.png")
  total_orders Int                @default(0)
  total_paid   Float              @default(0)
  address      ShipingAddresses[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime?
}

model ShipingAddresses {
  id         String      @id @default(cuid())
  address1   String
  address2   String?
  postalCode Int
  city       String
  state      String?
  accountId  String
  account    AccountInfo @relation(fields: [accountId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?
}

model Cart {
  id        String      @id @default(cuid())
  products  CartItems[]
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime?
}

model CartItems {
  id        String    @id @default(uuid())
  cartId    String
  skuId     String
  quantity  Int
  unitPrice Float
  cart      Cart      @relation(fields: [cartId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime?
}

/// ORDER
model Order {
  id          String         @id @default(cuid())
  status      OrderStatus    @default(PENDING)
  userId      String
  shippingId  String
  paid        Float
  due_pay     Float
  payMethod   Payments       @default(ONLINE)
  giftWrapper Boolean        @default(false)
  products    OrderedItems[]
  discount    Float?         @default(0)

  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime?
}

model OrderedItems {
  id        String    @id @default(uuid())
  orderId   String
  productId String?
  skuId     String
  quantity  Int
  unitPrice Float
  order     Order     @relation(fields: [orderId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime?
}

/// PRODUCT
model Product {
  id          String          @id @default(cuid())
  name        String
  skus        SKU[]
  sold        Int
  sellingZone SellingZone     @default(ANYWHERE)
  categoryId  String
  vendorId    String
  coverPhotos ProductPhotos[]
  availablity ShopStatus      @default(OPEN)
  category    Category        @relation(fields: [categoryId], references: [id])
  vendor      Vendor          @relation(fields: [vendorId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime?
}

model SKU {
  id        String          @id @default(cuid())
  productId String
  price     Float
  quantity  Int
  sold      Int
  product   Product         @relation(fields: [productId], references: [id])
  photos    ProductPhotos[]
  createdAt DateTime        @default(now())
  updatedAt DateTime?
}

model ProductPhotos {
  id        String  @id @default(cuid())
  photourl  String  @default("product.png")
  skuId     String?
  productId String?

  sku       SKU?      @relation(fields: [skuId], references: [id])
  product   Product?  @relation(fields: [productId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime?
}
